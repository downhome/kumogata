{"name":"Kumogata","tagline":"Kumogata is a tool for AWS CloudFormation.  It can define a template in Ruby DSL.","body":"# Kumogata\r\n\r\nKumogata is a tool for [AWS CloudFormation](https://aws.amazon.com/cloudformation/).\r\n\r\nThis is a `format converter` + `useful tool`.\r\nIt supports the following format:\r\n\r\n* JSON\r\n* Ruby\r\n* YAML\r\n* JavaScript\r\n* CoffeeScript (experimental)\r\n* JSON5 (experimental)\r\n\r\n[![Gem Version](https://badge.fury.io/rb/kumogata.png?201406152020)](http://badge.fury.io/rb/kumogata)\r\n[![Build Status](https://travis-ci.org/winebarrel/kumogata.svg?branch=master)](https://travis-ci.org/winebarrel/kumogata)\r\n\r\nIt can define a template in Ruby DSL, such as:\r\n\r\n```ruby\r\nAWSTemplateFormatVersion \"2010-09-09\"\r\n\r\nDescription (<<-EOS).undent\r\n  Kumogata Sample Template\r\n  You can use Here document!\r\nEOS\r\n\r\nParameters do\r\n  InstanceType do\r\n    Default \"t1.micro\"\r\n    Description \"Instance Type\"\r\n    Type \"String\"\r\n  end\r\nend\r\n\r\nResources do\r\n  myEC2Instance do\r\n    Type \"AWS::EC2::Instance\"\r\n    Properties do\r\n      ImageId \"ami-XXXXXXXX\"\r\n      InstanceType { Ref \"InstanceType\" }\r\n      KeyName \"your_key_name\"\r\n\r\n      UserData do\r\n        Fn__Base64 (<<-EOS).undent\r\n          #!/bin/bash\r\n          yum install -y httpd\r\n          service httpd start\r\n        EOS\r\n      end\r\n    end\r\n  end\r\nend\r\n\r\nOutputs do\r\n  AZ do\r\n    Value do\r\n      Fn__GetAtt \"myEC2Instance\", \"AvailabilityZone\"\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nRuby template structure is almost the same as [JSON template](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-structure.html).\r\n\r\n(**You can also use JSON templates**)\r\n\r\n## Installation\r\n\r\n    $ gem install kumogata\r\n\r\n## Usage\r\n\r\n```\r\nUsage: kumogata <command> [args] [options]\r\n\r\nCommands:\r\n  create         PATH_OR_URL [STACK_NAME]   Create resources as specified in the template\r\n  validate       PATH_OR_URL                Validate a specified template\r\n  convert        PATH_OR_URL                Convert a template format\r\n  update         PATH_OR_URL STACK_NAME     Update a stack as specified in the template\r\n  delete         STACK_NAME                 Delete a specified stack\r\n  list           [STACK_NAME]               List summary information for stacks\r\n  export         STACK_NAME                 Export a template from a specified stack\r\n  show-events    STACK_NAME                 Show events for a specified stack\r\n  show-outputs   STACK_NAME                 Show outputs for a specified stack\r\n  show-resources STACK_NAME                 Show resources for a specified stack\r\n  diff           PATH_OR_URL1 PATH_OR_URL2  Compare templates logically (file, http://..., stack://...)\r\n\r\nOptions:\r\n    -k, --access-key ACCESS_KEY\r\n    -s, --secret-key SECRET_KEY\r\n    -r, --region REGION\r\n        --config PATH\r\n        --profile CONFIG_PROFILE\r\n        --format TMPLATE_FORMAT\r\n        --output-format FORMAT\r\n        --skip-replace-underscore\r\n        --deletion-policy-retain\r\n    -p, --parameters KEY_VALUES\r\n    -j, --json-parameters JSON\r\n    -e, --encrypt-parameters KEYS\r\n        --encryption-password PASS\r\n        --skip-send-password\r\n        --capabilities CAPABILITIES\r\n        --disable-rollback\r\n        --notify SNS_TOPICS\r\n        --timeout MINUTES\r\n        --result-log PATH\r\n        --command-result-log PATH\r\n        --detach\r\n        --force\r\n    -w, --ignore-all-space\r\n        --color\r\n        --no-color\r\n        --debug\r\n    -v, --verbose\r\n```\r\n\r\n### KUMOGATA_OPTIONS\r\n\r\n`KUMOGATA_OPTIONS` variable specifies default options.\r\n\r\ne.g. `KUMOGATA_OPTIONS='-e Password'`\r\n\r\n### Create resources\r\n\r\n    $ kumogata create template.rb\r\n\r\nIf you want to save the stack, please specify the stack name:\r\n\r\n    $ kumogata create template.rb any_stack_name\r\n\r\nIf you want to pass parameters, please use `-p` option:\r\n\r\n    $ kumogata create template.rb -p \"InstanceType=m1.large,KeyName=any_other_key\"\r\n\r\n\r\n**Notice**\r\n\r\n**The stack will be delete if you do not specify the stack name explicitly.**\r\n(And only the resources will remain)\r\n\r\n### Convert JSON to Ruby\r\n\r\nJSON template can be converted to Ruby template.\r\n\r\n    $ kumogata convert https://s3.amazonaws.com/cloudformation-templates-us-east-1/Drupal_Single_Instance.template\r\n\r\n* Data that cannot be converted will be converted to Array and Hash\r\n* `::` is converted to `__`\r\n  * `Fn::GetAtt` => `Fn__GetAtt`\r\n* `_{ ... }` is convered to Hash\r\n  * `SecurityGroups [_{Ref \"WebServerSecurityGroup\"}]` => `{\"SecurityGroups\": [{\"Ref\": \"WebServerSecurityGroup\"}]}`\r\n* `_path()` creates Hash that has a key of path\r\n  * `_path(\"/etc/passwd-s3fs\") { content \"...\" }` => `{\"/etc/passwd-s3fs\": {\"content\": \"...\"}}`\r\n* ~~_user_data() creates Base64-encoded UserData~~\r\n  * `_user_data()` has been removed\r\n* `_join()` has been removed\r\n\r\n### String#fn_join()\r\n\r\nRuby templates will be converted as follows by `String#fn_join()`:\r\n\r\n```ruby\r\nUserData do\r\n  Fn__Base64 (<<-EOS).fn_join\r\n    #!/bin/bash\r\n    /opt/aws/bin/cfn-init -s <%= Ref \"AWS::StackName\" %> -r myEC2Instance --region <%= Ref \"AWS::Region\" %>\r\n  EOS\r\nend\r\n```\r\n\r\n```javascript\r\n\"UserData\": {\r\n  \"Fn::Base64\": {\r\n    \"Fn::Join\": [\r\n      \"\",\r\n      [\r\n        \"#!/bin/bash\\n\",\r\n        \"/opt/aws/bin/cfn-init -s \",\r\n        {\r\n          \"Ref\": \"AWS::StackName\"\r\n        },\r\n        \" -r myEC2Instance --region \",\r\n        {\r\n          \"Ref\": \"AWS::Region\"\r\n        },\r\n        \"\\n\"\r\n      ]\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\n### Split a template file\r\n\r\n* template.rb\r\n\r\n```ruby\r\nResources do\r\n  _include 'template2.rb'\r\nend\r\n```\r\n\r\n* template2.rb\r\n\r\n```ruby\r\nmyEC2Instance do\r\n  Type \"AWS::EC2::Instance\"\r\n  Properties do\r\n    ImageId \"ami-XXXXXXXX\"\r\n    InstanceType { Ref \"InstanceType\" }\r\n    KeyName \"your_key_name\"\r\n  end\r\nend\r\n```\r\n\r\n* Converted JSON template\r\n\r\n```javascript\r\n{\r\n  \"Resources\": {\r\n    \"myEC2Instance\": {\r\n      \"Type\": \"AWS::EC2::Instance\",\r\n      \"Properties\": {\r\n        \"ImageId\": \"ami-XXXXXXXX\",\r\n        \"InstanceType\": {\r\n          \"Ref\": \"InstanceType\"\r\n        },\r\n        \"KeyName\": \"your_key_name\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n### Encrypt parameters\r\n\r\n* Command line\r\n\r\n```\r\n$ kumogata create template.rb -e 'Password1,Password2' -p 'Param1=xxx,Param2=xxx,Password1=xxx,Password2=xxx'\r\n```\r\n\r\n* Template\r\n\r\n```ruby\r\nParameters do\r\n  Param1 { Type \"String\" }\r\n  Param2 { Type \"String\" }\r\n  Password1 { Type \"String\"; NoEcho true }\r\n  Password2 { Type \"String\"; NoEcho true }\r\nend # Parameters\r\n\r\nResources do\r\n  myEC2Instance do\r\n    Type \"AWS::EC2::Instance\"\r\n\r\n    Properties do\r\n      ImageId \"ami-XXXXXXXX\"\r\n\r\n      UserData do\r\n        Fn__Base64 (<<-EOS).fn_join\r\n          #!/bin/bash\r\n          /opt/aws/bin/cfn-init -s <%= Ref \"AWS::StackName\" %> -r myEC2Instance --region <%= Ref \"AWS::Region\" %>\r\n        EOS\r\n      end\r\n    end\r\n\r\n    Metadata do\r\n      AWS__CloudFormation__Init do\r\n        config do\r\n          commands do\r\n            any_command do\r\n              command (<<-EOS).fn_join\r\n                ENCRYPTION_PASSWORD=\"`echo '<%= Ref Kumogata::ENCRYPTION_PASSWORD %>' | base64 -d`\"\r\n\r\n                # Decrypt Password1\r\n                echo '<%= Ref \"Password1\" %>' | base64 -d | openssl enc -d -aes256 -pass pass:\"$ENCRYPTION_PASSWORD\" > password1\r\n\r\n                # Decrypt Password2\r\n                echo '<%= Ref \"Password2\" %>' | base64 -d | openssl enc -d -aes256 -pass pass:\"$ENCRYPTION_PASSWORD\" > password2\r\n              EOS\r\n            end\r\n          end\r\n        end\r\n      end\r\n    end\r\n  end # myEC2Instance\r\nend # Resources\r\n```\r\n\r\n## Iteration\r\n\r\nYou can use the Iteration in the template using `_(...)` method.\r\n\r\n```ruby\r\nResources do\r\n  ['instance1', 'instance2', 'instance3'].echo {|instance_name|\r\n    _(instance_name) do\r\n      Type \"AWS::EC2::Instance\"\r\n      Properties do\r\n        ImageId \"ami-XXXXXXXX\"\r\n        InstanceType { Ref \"InstanceType\" }\r\n        KeyName \"your_key_name\"\r\n\r\n        UserData (<<-EOS).undent.encode64\r\n          #!/bin/bash\r\n          yum install -y httpd\r\n          service httpd start\r\n          hostname #{instance_name}\r\n        EOS\r\n      end\r\n    end\r\n  }\r\nend\r\n```\r\n\r\n## Post command\r\n\r\nYou can run shell/ssh commands after building servers using `_post()`.\r\n\r\n* Template\r\n```ruby\r\nParameters do\r\n  ...\r\nend\r\n\r\nResources do\r\n  ...\r\nend\r\n\r\nOutputs do\r\n  MyPublicIp do\r\n    Value { Fn__GetAtt name, \"PublicIp\" }\r\n  end\r\nend\r\n\r\n_post do\r\n  my_shell_command do\r\n    command <<-EOS\r\n      echo <%= Key \"MyPublicIp\" %>\r\n    EOS\r\n  end\r\n  my_ssh_command do\r\n    ssh do\r\n      host { Key \"MyPublicIp\" } # or '<%= Key \"MyPublicIp\" %>'\r\n      user \"ec2-user\"\r\n      # see http://net-ssh.github.io/net-ssh/classes/Net/SSH.html#method-c-start\r\n      #options :timeout => 300\r\n      #connect_tries 36\r\n      #retry_interval 5\r\n      #request_pty true\r\n    end\r\n    command <<-EOS\r\n      hostname\r\n    EOS\r\n  end\r\nend\r\n```\r\n\r\n* Execution result\r\n```\r\n...\r\nCommand: my_shell_command\r\nStatus: 0\r\n1> 54.199.251.30\r\n\r\nCommand: my_ssh_command\r\nStatus: 0\r\n1> ip-10-0-129-20\r\n\r\n(Save to `/foo/bar/command_result.json`)\r\n```\r\n\r\n## JavaScript template\r\n\r\nYou can also use the JavaScript template instead of JSON and Ruby.\r\n\r\n```javascript\r\nfunction fetch_ami() {\r\n  return \"ami-XXXXXXXX\";\r\n}\r\n\r\n/* For JS Object is evaluated last, it must be enclosed in parentheses */\r\n({\r\n  Resources: { /* comment */\r\n    myEC2Instance: {\r\n      Type: \"AWS::EC2::Instance\",\r\n      Properties: {\r\n        ImageId: fetch_ami(),\r\n        InstanceType: \"t1.micro\"\r\n      }\r\n    }\r\n  },\r\n  Outputs: {\r\n    AZ: { /* comment */\r\n      Value: {\r\n        \"Fn::GetAtt\": [\r\n          \"myEC2Instance\",\r\n          \"AvailabilityZone\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n})\r\n\r\n/*\r\n {\r\n   \"Resources\": {\r\n     \"myEC2Instance\": {\r\n       \"Type\": \"AWS::EC2::Instance\",\r\n       \"Properties\": {\r\n         \"ImageId\": \"ami-XXXXXXXX\",\r\n         \"InstanceType\": \"t1.micro\"\r\n       }\r\n     }\r\n   },\r\n   \"Outputs\": {\r\n     \"AZ\": {\r\n       \"Value\": {\r\n         \"Fn::GetAtt\": [\r\n           \"myEC2Instance\",\r\n           \"AvailabilityZone\"\r\n         ]\r\n       }\r\n     }\r\n   }\r\n }\r\n */\r\n```\r\n\r\n### Convert JSON template to JavaScript\r\n\r\n    $ kumogata convert Drupal_Single_Instance.template --output-format=js\r\n\r\n## CoffeeScript template\r\n\r\nYou can also use the CoffeeScript template instead of JSON and Ruby.\r\n\r\n```coffeescript\r\nfetch_ami = () -> \"ami-XXXXXXXX\"\r\n\r\n/* For JS Object is evaluated last, it must use `return` */\r\nreturn {\r\n  Resources:\r\n    myEC2Instance:\r\n      Type: \"AWS::EC2::Instance\",\r\n      Properties:\r\n        ImageId: fetch_ami(),\r\n        InstanceType: \"t1.micro\"\r\n  Outputs:\r\n    AZ: # comment\r\n      Value:\r\n        \"Fn::GetAtt\": [\r\n          \"myEC2Instance\",\r\n          \"AvailabilityZone\"\r\n        ]\r\n}\r\n\r\n###\r\n {\r\n   \"Resources\": {\r\n     \"myEC2Instance\": {\r\n       \"Type\": \"AWS::EC2::Instance\",\r\n       \"Properties\": {\r\n         \"ImageId\": \"ami-XXXXXXXX\",\r\n         \"InstanceType\": \"t1.micro\"\r\n       }\r\n     }\r\n   },\r\n   \"Outputs\": {\r\n     \"AZ\": {\r\n       \"Value\": {\r\n         \"Fn::GetAtt\": [\r\n           \"myEC2Instance\",\r\n           \"AvailabilityZone\"\r\n         ]\r\n       }\r\n     }\r\n   }\r\n }\r\n###\r\n```\r\n\r\n## YAML template\r\n\r\nYou can also use the YAML template instead of JSON and Ruby.\r\n\r\n```yaml\r\n---\r\nResources:\r\n  myEC2Instance:\r\n    Type: AWS::EC2::Instance\r\n    Properties:\r\n      ImageId: ami-XXXXXXXX\r\n      InstanceType: t1.micro\r\nOutputs:\r\n  AZ:\r\n    Value:\r\n      Fn::GetAtt:\r\n      - myEC2Instance\r\n      - AvailabilityZone\r\n\r\n# {\r\n#   \"Resources\": {\r\n#     \"myEC2Instance\": {\r\n#       \"Type\": \"AWS::EC2::Instance\",\r\n#       \"Properties\": {\r\n#         \"ImageId\": \"ami-XXXXXXXX\",\r\n#         \"InstanceType\": \"t1.micro\"\r\n#       }\r\n#     }\r\n#   },\r\n#   \"Outputs\": {\r\n#     \"AZ\": {\r\n#       \"Value\": {\r\n#         \"Fn::GetAtt\": [\r\n#           \"myEC2Instance\",\r\n#           \"AvailabilityZone\"\r\n#         ]\r\n#       }\r\n#     }\r\n#   }\r\n# }\r\n```\r\n\r\n### Convert JSON template to YAML\r\n\r\n    $ kumogata convert Drupal_Single_Instance.template --output-format=yaml\r\n\r\n## [JSON5](http://json5.org/) template\r\n\r\nYou can also use the [JSON5](http://json5.org/) template instead of JSON and Ruby.\r\n\r\n```javascript\r\n{\r\n  Resources: { /* comment */\r\n    myEC2Instance: {\r\n      Type: \"AWS::EC2::Instance\",\r\n      Properties: {\r\n        ImageId: \"ami-XXXXXXXX\",\r\n        InstanceType: \"t1.micro\"\r\n      }\r\n    }\r\n  },\r\n  Outputs: {\r\n    AZ: { /* comment */\r\n      Value: {\r\n        \"Fn::GetAtt\": [\r\n          \"myEC2Instance\",\r\n          \"AvailabilityZone\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/*\r\n {\r\n   \"Resources\": {\r\n     \"myEC2Instance\": {\r\n       \"Type\": \"AWS::EC2::Instance\",\r\n       \"Properties\": {\r\n         \"ImageId\": \"ami-XXXXXXXX\",\r\n         \"InstanceType\": \"t1.micro\"\r\n       }\r\n     }\r\n   },\r\n   \"Outputs\": {\r\n     \"AZ\": {\r\n       \"Value\": {\r\n         \"Fn::GetAtt\": [\r\n           \"myEC2Instance\",\r\n           \"AvailabilityZone\"\r\n         ]\r\n       }\r\n     }\r\n   }\r\n }\r\n */\r\n```\r\n\r\n## Outputs Filter\r\n\r\n```ruby\r\nOutputs do\r\n  MyPublicIp do\r\n    Value { Fn__GetAtt \"MyInstance\", \"PublicIp\" }\r\n  end\r\nend\r\n\r\n_outputs_filter do |output|\r\n  outputs[\"MyPublicIp\"].gsub!('.', '_')\r\n  # MyPublicIp: XXX.XXX.XXX.XXX => XXX-XXX-XXX-XXX\r\nend\r\n\r\n_post do\r\n  ...\r\nend\r\n```\r\n\r\n## Configuration File\r\n\r\nKumogata supports [aws-sdk configuration file](http://docs.aws.amazon.com/AWSSdkDocsRuby/latest/DeveloperGuide/ruby-dg-setup.html#set-up-creds).\r\n\r\n```\r\n[default]\r\naws_access_key_id=AKIAIOSFODNN7EXAMPLE\r\naws_secret_access_key=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\r\naws_session_token=texample123324\r\n```\r\n\r\n## Demo\r\n\r\n* Create resources\r\n  * https://asciinema.org/a/7979\r\n* Convert a template\r\n  * https://asciinema.org/a/7980\r\n* Create a stack while outputting the event log\r\n  * https://asciinema.org/a/8075\r\n* Create a stack and run post commands\r\n  * https://asciinema.org/a/8088\r\n\r\n## Contributing\r\n\r\n1. Fork it ( http://github.com/winebarrel/kumogata/fork )\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}